// Code generated by protoc-gen-go.
// source: raft.proto
// DO NOT EDIT!

/*
Package raft is a generated protocol buffer package.

It is generated from these files:
	raft.proto

It has these top-level messages:
	Node
	Cluster
	LogEntry
	AppendEntriesRequest
	AppendEntriesResponse
	RequestVoteRequest
	RequestVoteResponse
*/
package raft

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Node struct {
	Id       uint64 `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	Address  string `protobuf:"bytes,2,opt,name=address" json:"address,omitempty"`
	DataPath string `protobuf:"bytes,3,opt,name=dataPath" json:"dataPath,omitempty"`
}

func (m *Node) Reset()                    { *m = Node{} }
func (m *Node) String() string            { return proto.CompactTextString(m) }
func (*Node) ProtoMessage()               {}
func (*Node) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Node) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Node) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Node) GetDataPath() string {
	if m != nil {
		return m.DataPath
	}
	return ""
}

type Cluster struct {
	Nodes []*Node `protobuf:"bytes,1,rep,name=nodes" json:"nodes,omitempty"`
}

func (m *Cluster) Reset()                    { *m = Cluster{} }
func (m *Cluster) String() string            { return proto.CompactTextString(m) }
func (*Cluster) ProtoMessage()               {}
func (*Cluster) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Cluster) GetNodes() []*Node {
	if m != nil {
		return m.Nodes
	}
	return nil
}

type LogEntry struct {
	Log []byte `protobuf:"bytes,1,opt,name=log,proto3" json:"log,omitempty"`
}

func (m *LogEntry) Reset()                    { *m = LogEntry{} }
func (m *LogEntry) String() string            { return proto.CompactTextString(m) }
func (*LogEntry) ProtoMessage()               {}
func (*LogEntry) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *LogEntry) GetLog() []byte {
	if m != nil {
		return m.Log
	}
	return nil
}

type AppendEntriesRequest struct {
	Term         uint64      `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	LeaderId     uint64      `protobuf:"varint,2,opt,name=leaderId" json:"leaderId,omitempty"`
	PrevLogIndex uint64      `protobuf:"varint,3,opt,name=prevLogIndex" json:"prevLogIndex,omitempty"`
	PrevLogTerm  uint64      `protobuf:"varint,4,opt,name=prevLogTerm" json:"prevLogTerm,omitempty"`
	Entires      []*LogEntry `protobuf:"bytes,5,rep,name=entires" json:"entires,omitempty"`
	LeaderCommit uint64      `protobuf:"varint,6,opt,name=leaderCommit" json:"leaderCommit,omitempty"`
}

func (m *AppendEntriesRequest) Reset()                    { *m = AppendEntriesRequest{} }
func (m *AppendEntriesRequest) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesRequest) ProtoMessage()               {}
func (*AppendEntriesRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *AppendEntriesRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesRequest) GetLeaderId() uint64 {
	if m != nil {
		return m.LeaderId
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogIndex() uint64 {
	if m != nil {
		return m.PrevLogIndex
	}
	return 0
}

func (m *AppendEntriesRequest) GetPrevLogTerm() uint64 {
	if m != nil {
		return m.PrevLogTerm
	}
	return 0
}

func (m *AppendEntriesRequest) GetEntires() []*LogEntry {
	if m != nil {
		return m.Entires
	}
	return nil
}

func (m *AppendEntriesRequest) GetLeaderCommit() uint64 {
	if m != nil {
		return m.LeaderCommit
	}
	return 0
}

type AppendEntriesResponse struct {
	Term    uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	Success bool   `protobuf:"varint,2,opt,name=success" json:"success,omitempty"`
}

func (m *AppendEntriesResponse) Reset()                    { *m = AppendEntriesResponse{} }
func (m *AppendEntriesResponse) String() string            { return proto.CompactTextString(m) }
func (*AppendEntriesResponse) ProtoMessage()               {}
func (*AppendEntriesResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *AppendEntriesResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *AppendEntriesResponse) GetSuccess() bool {
	if m != nil {
		return m.Success
	}
	return false
}

type RequestVoteRequest struct {
	Term         uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	CandidateId  uint64 `protobuf:"varint,2,opt,name=candidateId" json:"candidateId,omitempty"`
	LastLogIndex uint64 `protobuf:"varint,3,opt,name=lastLogIndex" json:"lastLogIndex,omitempty"`
	LastLogTerm  uint64 `protobuf:"varint,4,opt,name=lastLogTerm" json:"lastLogTerm,omitempty"`
}

func (m *RequestVoteRequest) Reset()                    { *m = RequestVoteRequest{} }
func (m *RequestVoteRequest) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteRequest) ProtoMessage()               {}
func (*RequestVoteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *RequestVoteRequest) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteRequest) GetCandidateId() uint64 {
	if m != nil {
		return m.CandidateId
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogIndex() uint64 {
	if m != nil {
		return m.LastLogIndex
	}
	return 0
}

func (m *RequestVoteRequest) GetLastLogTerm() uint64 {
	if m != nil {
		return m.LastLogTerm
	}
	return 0
}

type RequestVoteResponse struct {
	Term        uint64 `protobuf:"varint,1,opt,name=term" json:"term,omitempty"`
	VoteGranted bool   `protobuf:"varint,2,opt,name=voteGranted" json:"voteGranted,omitempty"`
}

func (m *RequestVoteResponse) Reset()                    { *m = RequestVoteResponse{} }
func (m *RequestVoteResponse) String() string            { return proto.CompactTextString(m) }
func (*RequestVoteResponse) ProtoMessage()               {}
func (*RequestVoteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *RequestVoteResponse) GetTerm() uint64 {
	if m != nil {
		return m.Term
	}
	return 0
}

func (m *RequestVoteResponse) GetVoteGranted() bool {
	if m != nil {
		return m.VoteGranted
	}
	return false
}

func init() {
	proto.RegisterType((*Node)(nil), "raft.Node")
	proto.RegisterType((*Cluster)(nil), "raft.Cluster")
	proto.RegisterType((*LogEntry)(nil), "raft.LogEntry")
	proto.RegisterType((*AppendEntriesRequest)(nil), "raft.AppendEntriesRequest")
	proto.RegisterType((*AppendEntriesResponse)(nil), "raft.AppendEntriesResponse")
	proto.RegisterType((*RequestVoteRequest)(nil), "raft.RequestVoteRequest")
	proto.RegisterType((*RequestVoteResponse)(nil), "raft.RequestVoteResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for RaftService service

type RaftServiceClient interface {
	AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error)
	RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error)
}

type raftServiceClient struct {
	cc *grpc.ClientConn
}

func NewRaftServiceClient(cc *grpc.ClientConn) RaftServiceClient {
	return &raftServiceClient{cc}
}

func (c *raftServiceClient) AppendEntries(ctx context.Context, in *AppendEntriesRequest, opts ...grpc.CallOption) (*AppendEntriesResponse, error) {
	out := new(AppendEntriesResponse)
	err := grpc.Invoke(ctx, "/raft.RaftService/AppendEntries", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *raftServiceClient) RequestVote(ctx context.Context, in *RequestVoteRequest, opts ...grpc.CallOption) (*RequestVoteResponse, error) {
	out := new(RequestVoteResponse)
	err := grpc.Invoke(ctx, "/raft.RaftService/RequestVote", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for RaftService service

type RaftServiceServer interface {
	AppendEntries(context.Context, *AppendEntriesRequest) (*AppendEntriesResponse, error)
	RequestVote(context.Context, *RequestVoteRequest) (*RequestVoteResponse, error)
}

func RegisterRaftServiceServer(s *grpc.Server, srv RaftServiceServer) {
	s.RegisterService(&_RaftService_serviceDesc, srv)
}

func _RaftService_AppendEntries_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AppendEntriesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).AppendEntries(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/AppendEntries",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).AppendEntries(ctx, req.(*AppendEntriesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RaftService_RequestVote_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestVoteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RaftServiceServer).RequestVote(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/raft.RaftService/RequestVote",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RaftServiceServer).RequestVote(ctx, req.(*RequestVoteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _RaftService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "raft.RaftService",
	HandlerType: (*RaftServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AppendEntries",
			Handler:    _RaftService_AppendEntries_Handler,
		},
		{
			MethodName: "RequestVote",
			Handler:    _RaftService_RequestVote_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "raft.proto",
}

func init() { proto.RegisterFile("raft.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 414 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x53, 0xdd, 0x8a, 0x13, 0x31,
	0x14, 0x76, 0xda, 0xd9, 0x6d, 0x3d, 0xb3, 0x2e, 0x72, 0x54, 0x88, 0xd5, 0x8b, 0x21, 0x57, 0x05,
	0x61, 0x2f, 0xd6, 0x27, 0x90, 0x75, 0x91, 0xd5, 0x22, 0x12, 0xc5, 0xfb, 0xd8, 0x9c, 0xad, 0x03,
	0x6d, 0x32, 0x26, 0xa7, 0x45, 0xdf, 0xc2, 0x37, 0xf0, 0xbd, 0x7c, 0x1a, 0x49, 0x66, 0xa6, 0xa4,
	0x6b, 0xd9, 0xbb, 0x7c, 0xdf, 0x09, 0xe7, 0xfb, 0xc9, 0x0c, 0x80, 0xd7, 0xb7, 0x7c, 0xd1, 0x7a,
	0xc7, 0x0e, 0xcb, 0x78, 0x96, 0x0b, 0x28, 0x3f, 0x3a, 0x43, 0x78, 0x0e, 0xa3, 0xc6, 0x88, 0xa2,
	0x2e, 0xe6, 0xa5, 0x1a, 0x35, 0x06, 0x05, 0x4c, 0xb4, 0x31, 0x9e, 0x42, 0x10, 0xa3, 0xba, 0x98,
	0x3f, 0x54, 0x03, 0xc4, 0x19, 0x4c, 0x8d, 0x66, 0xfd, 0x49, 0xf3, 0x77, 0x31, 0x4e, 0xa3, 0x3d,
	0x96, 0xaf, 0x60, 0x72, 0xb5, 0xde, 0x06, 0x26, 0x8f, 0x35, 0x9c, 0x58, 0x67, 0x28, 0x88, 0xa2,
	0x1e, 0xcf, 0xab, 0x4b, 0xb8, 0x48, 0xd2, 0x51, 0x4b, 0x75, 0x03, 0xf9, 0x12, 0xa6, 0x0b, 0xb7,
	0xba, 0xb6, 0xec, 0x7f, 0xe1, 0x63, 0x18, 0xaf, 0xdd, 0x2a, 0xe9, 0x9f, 0xa9, 0x78, 0x94, 0x7f,
	0x0b, 0x78, 0xfa, 0xa6, 0x6d, 0xc9, 0x9a, 0x78, 0xa3, 0xa1, 0xa0, 0xe8, 0xc7, 0x96, 0x02, 0x23,
	0x42, 0xc9, 0xe4, 0x37, 0xbd, 0xd7, 0x74, 0x8e, 0x9e, 0xd6, 0xa4, 0x0d, 0xf9, 0x1b, 0x93, 0xec,
	0x96, 0x6a, 0x8f, 0x51, 0xc2, 0x59, 0xeb, 0x69, 0xb7, 0x70, 0xab, 0x1b, 0x6b, 0xe8, 0x67, 0xf2,
	0x5c, 0xaa, 0x03, 0x0e, 0x6b, 0xa8, 0x7a, 0xfc, 0x25, 0xae, 0x2e, 0xd3, 0x95, 0x9c, 0xc2, 0x39,
	0x4c, 0xc8, 0x72, 0xe3, 0x29, 0x88, 0x93, 0x14, 0xe8, 0xbc, 0x0b, 0x34, 0x24, 0x50, 0xc3, 0x38,
	0xea, 0x75, 0xda, 0x57, 0x6e, 0xb3, 0x69, 0x58, 0x9c, 0x76, 0x7a, 0x39, 0x27, 0xaf, 0xe1, 0xd9,
	0x9d, 0x6c, 0xa1, 0x75, 0x36, 0xd0, 0xd1, 0x70, 0x02, 0x26, 0x61, 0xbb, 0x5c, 0x0e, 0x4f, 0x31,
	0x55, 0x03, 0x94, 0xbf, 0x0b, 0xc0, 0xbe, 0x96, 0xaf, 0x8e, 0xe9, 0xbe, 0x86, 0x6a, 0xa8, 0x96,
	0xda, 0x9a, 0xc6, 0x68, 0xa6, 0x7d, 0x49, 0x39, 0x95, 0x7c, 0xeb, 0xc0, 0x77, 0x7b, 0xca, 0xb9,
	0xb8, 0xa5, 0xc7, 0x79, 0x4f, 0x19, 0x25, 0x3f, 0xc0, 0x93, 0x03, 0x47, 0xf7, 0xe4, 0xaa, 0xa1,
	0xda, 0x39, 0xa6, 0x77, 0x5e, 0x5b, 0x26, 0xd3, 0x67, 0xcb, 0xa9, 0xcb, 0x3f, 0x05, 0x54, 0x4a,
	0xdf, 0xf2, 0x67, 0xf2, 0xbb, 0x66, 0x49, 0xf8, 0x1e, 0x1e, 0x1d, 0xd4, 0x86, 0xb3, 0xee, 0x11,
	0x8e, 0x7d, 0x27, 0xb3, 0x17, 0x47, 0x67, 0x9d, 0x1f, 0xf9, 0x00, 0xdf, 0x42, 0x95, 0x19, 0x45,
	0xd1, 0xdd, 0xfe, 0xbf, 0xcd, 0xd9, 0xf3, 0x23, 0x93, 0x61, 0xcb, 0xb7, 0xd3, 0xf4, 0x2f, 0xbd,
	0xfe, 0x17, 0x00, 0x00, 0xff, 0xff, 0x12, 0xdf, 0x28, 0x12, 0x59, 0x03, 0x00, 0x00,
}
